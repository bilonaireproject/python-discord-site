name: Build & Deploy Static Preview

on:
  workflow_run:
    workflows: ["Lint & Test"]
    types:
      - completed
    pull_request:

jobs:
  build:
    name: Build Static Preview
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push'
    runs-on: ubuntu-latest

    env:
      # Configure pip to cache dependencies and do a user install
      PIP_NO_CACHE_DIR: false
      PIP_USER: 1

      # Make sure package manager does not use virtualenv
      POETRY_VIRTUALENVS_CREATE: false

      # Specify explicit paths for python dependencies and the pre-commit
      # environment so we know which directories to cache
      POETRY_CACHE_DIR: ${{ github.workspace }}/.cache/py-user-base
      PYTHONUSERBASE: ${{ github.workspace }}/.cache/py-user-base
      PRE_COMMIT_HOME: ${{ github.workspace }}/.cache/pre-commit-cache

    steps:
      - name: Add custom PYTHONUSERBASE to PATH
        run: echo '${{ env.PYTHONUSERBASE }}/bin/' >> $GITHUB_PATH

      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Python Dependency Caching
        uses: actions/cache@v2
        id: python_cache
        with:
          path: ${{ env.PYTHONUSERBASE }}
          key: "python-0-${{ runner.os }}-${{ env.PYTHONUSERBASE }}-\
          ${{ steps.python.outputs.python-version }}-\
          ${{ hashFiles('./pyproject.toml', './poetry.lock') }}"

      - name: Install Depedencies
        if: steps.python_cache.outputs.cache-hit != 'true'
        run: |
          pip install -U poetry
          poetry install
          npm install netlify-cli -g

      - name: Build Site
        run: python mange.py distill-local build --traceback --force
        env:
          PARENT_HOST: ${{ github.event.pull_request.number }}

      - run: netlify login && netlify link --id ${{ secrets.NETLIFY_SITE_ID }}
      - run: netlify deploy --dir=build
